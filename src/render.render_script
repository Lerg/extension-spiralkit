function init(self)
	self.tile_pred = render.predicate({'tile'})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config('render.clear_color_red', 0)
	self.clear_color.y = sys.get_config('render.clear_color_green', 0)
	self.clear_color.z = sys.get_config('render.clear_color_blue', 0)
	self.clear_color.w = sys.get_config('render.clear_color_alpha', 0)

	self.view = vmath.matrix4()
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width == 0 or window_height == 0 then
		return
	end

	--render.set_depth_mask(true)
	--render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	local proj_width, proj_height = window_width / 2, window_height / 2
	local proj = vmath.matrix4_orthographic(-proj_width, proj_width, -proj_height, proj_height, -2, 2)
	local frustum = proj * self.view

	render.set_viewport(0, 0, window_width, window_height)
	render.set_view(self.view)
	render.set_projection(proj)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.tile_pred, {frustum = frustum})
end
